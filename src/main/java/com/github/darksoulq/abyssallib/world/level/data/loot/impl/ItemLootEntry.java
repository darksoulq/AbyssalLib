package com.github.darksoulq.abyssallib.world.level.data.loot.impl;

import com.github.darksoulq.abyssallib.world.level.data.loot.LootContext;
import com.github.darksoulq.abyssallib.world.level.data.loot.LootEntry;
import com.github.darksoulq.abyssallib.world.level.data.loot.LootFunction;
import org.bukkit.inventory.ItemStack;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Supplier;

/**
 * A simple loot entry that generates a single {@link ItemStack} using a {@link Supplier}.
 *
 * <p>This entry allows chaining {@link LootFunction}s that can modify the item
 * before it is returned. It is commonly used to represent static or dynamically
 * generated items in loot tables.
 */
public class ItemLootEntry implements LootEntry {
    private final Supplier<ItemStack> stackSupplier;
    private final List<LootFunction> functions = new ArrayList<>();

    /**
     * Creates a new item loot entry.
     *
     * @param stackSupplier a supplier that provides a fresh {@link ItemStack} each time this entry is rolled
     */
    public ItemLootEntry(Supplier<ItemStack> stackSupplier) {
        this.stackSupplier = stackSupplier;
    }

    /**
     * Adds a loot function to modify the item generated by this entry.
     * Functions are applied in the order they are added.
     *
     * @param function the loot function to apply
     * @return this entry, for method chaining
     */
    public ItemLootEntry apply(LootFunction function) {
        functions.add(function);
        return this;
    }

    /**
     * Generates the item for this entry, applying all registered functions to it.
     *
     * @param context the loot context
     * @return a list containing the generated and modified {@link ItemStack}
     */
    @Override
    public List<ItemStack> generate(LootContext context) {
        ItemStack stack = stackSupplier.get();
        for (LootFunction function : functions) {
            stack = function.apply(stack, context);
        }
        return List.of(stack);
    }
}
