name: Repository Notifications

on:
  push:
    branches: ["**"]
  pull_request:
    types: [opened, closed, reopened, merged]
  issues:
    types: [opened, closed, reopened]
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  watch:
    types: [started]
  fork:

jobs:
  push:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Build Push Embed
        id: build_push
        env:
          REPO: ${{ github.repository }}
          REF: ${{ github.ref_name }}
          ACTOR: ${{ github.actor }}
          COMPARE: ${{ github.event.compare }}
          COMMITS_JSON: ${{ toJson(github.event.commits) }}
        run: |
          MAX_COMMITS=5
          COMMITS_FIELDS=$(jq -nc --argjson commits "$COMMITS_JSON" --arg compare "$COMPARE" --arg repo "$REPO" '
            def truncate(s; n): if s|length > n then (s[:n] + "…") else s end;
            [
              ($commits | to_entries | .[:$MAX_COMMITS] | map({
                name: ("Commit #" + (.key + 1|tostring)),
                value: (
                  "[`" + (.value.id[0:7]) + "`](https://github.com/\($repo)/commit/" + .value.id + ") " +
                  (.value.message | split("\n")[0]) + " — [" + (.value.author.username // .value.author.name) + "](https://github.com/" + (.value.author.username // .value.author.name) + ")" +
                  ( (.value.message | split("\n")[1:] | join(" ") | truncate(200)) | if .=="" then "" else "\n" + . end )
                ),
                inline: false
              }))
            ] + if ($commits|length) > $MAX_COMMITS then [{"name":"More","value":"…and more commits, see [compare](" + $compare + ")","inline":false}] else [] end
          ')

          BRANCH_URL="https://github.com/$REPO/tree/$REF"
          PUSHER_URL="https://github.com/$ACTOR"
          PUSHER_AVATAR="https://github.com/$ACTOR.png"

          EMBEDS=$(jq -nc --arg repo "$REPO" --arg ref "$REF" --arg branch_url "$BRANCH_URL" --arg pusher "$ACTOR" --arg pusher_url "$PUSHER_URL" --arg pusher_avatar "$PUSHER_AVATAR" --argjson fields "$COMMITS_FIELDS" '[
            {
              author: { name: $pusher, url: $pusher_url, icon_url: $pusher_avatar },
              title: ($repo + " [" + ($fields | length | tostring) + " new commits]"),
              url: $branch_url,
              description: ("Branch: [" + $ref + "](" + $branch_url + ")"),
              color: 3066993,
              fields: $fields
            }
          ]')

          echo "payload<<EOF" >> $GITHUB_OUTPUT
          jq -nc --argjson embeds "$EMBEDS" '{username:"GitHub", avatar_url:"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png", embeds:$embeds}' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Push Embed
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '${{ steps.build_push.outputs.payload }}' \
            https://discord.com/api/webhooks/${{ secrets.DISCORD_MAIN_ID }}/${{ secrets.DISCORD_MAIN_TOKEN }}

  pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Build PR Embed
        id: build_pr
        env:
          EVENT_JSON: ${{ toJson(github.event) }}
        run: |
          REPO=$(jq -r '.repository.full_name' <<< "$EVENT_JSON")
          TITLE=$(jq -r '.pull_request.title' <<< "$EVENT_JSON")
          BODY=$(jq -r '.pull_request.body // "No description"' <<< "$EVENT_JSON" | cut -c1-500)
          NUMBER=$(jq -r '.pull_request.number' <<< "$EVENT_JSON")
          ACTION=$(jq -r '.action' <<< "$EVENT_JSON")
          AUTHOR=$(jq -r '.pull_request.user.login' <<< "$EVENT_JSON")
          AVATAR="https://github.com/$AUTHOR.png"
          AUTHOR_URL="https://github.com/$AUTHOR"
          HTML=$(jq -r '.pull_request.html_url' <<< "$EVENT_JSON")

          EMBEDS=$(jq -nc --arg repo "$REPO" --arg title "$TITLE" --arg body "$BODY" --arg number "$NUMBER" --arg action "$ACTION" --arg author "$AUTHOR" --arg author_url "$AUTHOR_URL" --arg avatar "$AVATAR" --arg html "$HTML" '[
            {
              author: { name: $author, url: $author_url, icon_url: $avatar },
              title: ("PR #" + $number + " " + $title),
              url: $html,
              description: ("**" + $action + "**\n\n" + $body),
              color: 3447003
            }
          ]')

          echo "payload<<EOF" >> $GITHUB_OUTPUT
          jq -nc --argjson embeds "$EMBEDS" '{username:"GitHub", avatar_url:"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png", embeds:$embeds}' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send PR Embed
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '${{ steps.build_pr.outputs.payload }}' \
            https://discord.com/api/webhooks/${{ secrets.DISCORD_PR_ID }}/${{ secrets.DISCORD_PR_TOKEN }}

  issue:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Build Issue Embed
        id: build_issue
        env:
          EVENT_JSON: ${{ toJson(github.event) }}
        run: |
          TITLE=$(jq -r '.issue.title' <<< "$EVENT_JSON")
          BODY=$(jq -r '.issue.body // "No description"' <<< "$EVENT_JSON" | cut -c1-500)
          NUMBER=$(jq -r '.issue.number' <<< "$EVENT_JSON")
          ACTION=$(jq -r '.action' <<< "$EVENT_JSON")
          AUTHOR=$(jq -r '.issue.user.login' <<< "$EVENT_JSON")
          AVATAR="https://github.com/$AUTHOR.png"
          AUTHOR_URL="https://github.com/$AUTHOR"
          HTML=$(jq -r '.issue.html_url' <<< "$EVENT_JSON")

          EMBEDS=$(jq -nc --arg title "$TITLE" --arg body "$BODY" --arg number "$NUMBER" --arg action "$ACTION" --arg author "$AUTHOR" --arg author_url "$AUTHOR_URL" --arg avatar "$AVATAR" --arg html "$HTML" '[
            {
              author: { name: $author, url: $author_url, icon_url: $avatar },
              title: ("Issue #" + $number + " " + $title),
              url: $html,
              description: ("**" + $action + "**\n\n" + $body),
              color: 15158332
            }
          ]')

          echo "payload<<EOF" >> $GITHUB_OUTPUT
          jq -nc --argjson embeds "$EMBEDS" '{username:"GitHub", avatar_url:"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png", embeds:$embeds}' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Issue Embed
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '${{ steps.build_issue.outputs.payload }}' \
            https://discord.com/api/webhooks/${{ secrets.DISCORD_ISSUES_ID }}/${{ secrets.DISCORD_ISSUES_TOKEN }}

  issue_comment:
    if: github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    steps:
      - name: Build Issue Comment Embed
        id: build_comment
        env:
          EVENT_JSON: ${{ toJson(github.event) }}
        run: |
          TITLE=$(jq -r '.issue.title' <<< "$EVENT_JSON")
          NUMBER=$(jq -r '.issue.number' <<< "$EVENT_JSON")
          AUTHOR=$(jq -r '.comment.user.login' <<< "$EVENT_JSON")
          AVATAR="https://github.com/$AUTHOR.png"
          AUTHOR_URL="https://github.com/$AUTHOR"
          BODY=$(jq -r '.comment.body' <<< "$EVENT_JSON" | cut -c1-500)
          HTML=$(jq -r '.comment.html_url' <<< "$EVENT_JSON")

          EMBEDS=$(jq -nc --arg title "$TITLE" --arg number "$NUMBER" --arg author "$AUTHOR" --arg author_url "$AUTHOR_URL" --arg avatar "$AVATAR" --arg body "$BODY" --arg html "$HTML" '[
            {
              author: { name: $author, url: $author_url, icon_url: $avatar },
              title: ("Comment on Issue #" + $number + " " + $title),
              url: $html,
              description: $body,
              color: 15844367
            }
          ]')

          echo "payload<<EOF" >> $GITHUB_OUTPUT
          jq -nc --argjson embeds "$EMBEDS" '{username:"GitHub", avatar_url:"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png", embeds:$embeds}' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Comment Embed
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '${{ steps.build_comment.outputs.payload }}' \
            https://discord.com/api/webhooks/${{ secrets.DISCORD_ISSUES_ID }}/${{ secrets.DISCORD_ISSUES_TOKEN }}

  pr_review_comment:
    if: github.event_name == 'pull_request_review_comment'
    runs-on: ubuntu-latest
    steps:
      - name: Build PR Review Comment Embed
        id: build_pr_comment
        env:
          EVENT_JSON: ${{ toJson(github.event) }}
        run: |
          TITLE=$(jq -r '.pull_request.title' <<< "$EVENT_JSON")
          NUMBER=$(jq -r '.pull_request.number' <<< "$EVENT_JSON")
          AUTHOR=$(jq -r '.comment.user.login' <<< "$EVENT_JSON")
          AVATAR="https://github.com/$AUTHOR.png"
          AUTHOR_URL="https://github.com/$AUTHOR"
          BODY=$(jq -r '.comment.body' <<< "$EVENT_JSON" | cut -c1-500)
          HTML=$(jq -r '.comment.html_url' <<< "$EVENT_JSON")

          EMBEDS=$(jq -nc --arg title "$TITLE" --arg number "$NUMBER" --arg author "$AUTHOR" --arg author_url "$AUTHOR_URL" --arg avatar "$AVATAR" --arg body "$BODY" --arg html "$HTML" '[
            {
              author: { name: $author, url: $author_url, icon_url: $avatar },
              title: ("Review Comment on PR #" + $number + " " + $title),
              url: $html,
              description: $body,
              color: 10181046
            }
          ]')

          echo "payload<<EOF" >> $GITHUB_OUTPUT
          jq -nc --argjson embeds "$EMBEDS" '{username:"GitHub", avatar_url:"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png", embeds:$embeds}' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send PR Review Comment Embed
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '${{ steps.build_pr_comment.outputs.payload }}' \
            https://discord.com/api/webhooks/${{ secrets.DISCORD_PR_ID }}/${{ secrets.DISCORD_PR_TOKEN }}

  star:
    if: github.event_name == 'watch'
    runs-on: ubuntu-latest
    steps:
      - name: Build Star Embed
        id: build_star
        env:
          EVENT_JSON: ${{ toJson(github.event) }}
        run: |
          REPO=$(jq -r '.repository.full_name' <<< "$EVENT_JSON")
          AUTHOR=$(jq -r '.sender.login' <<< "$EVENT_JSON")
          AVATAR="https://github.com/$AUTHOR.png"
          AUTHOR_URL="https://github.com/$AUTHOR"
          URL=$(jq -r '.repository.html_url' <<< "$EVENT_JSON")

          EMBEDS=$(jq -nc --arg repo "$REPO" --arg author "$AUTHOR" --arg author_url "$AUTHOR_URL" --arg avatar "$AVATAR" --arg url "$URL" '[
            {
              author: { name: $author, url: $author_url, icon_url: $avatar },
              title: "Starred Repository",
              url: $url,
              description: ("[" + $author + "](" + $author_url + ") starred [" + $repo + "](" + $url + ")"),
              color: 1752220
            }
          ]')

          echo "payload<<EOF" >> $GITHUB_OUTPUT
          jq -nc --argjson embeds "$EMBEDS" '{username:"GitHub", avatar_url:"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png", embeds:$embeds}' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Star Embed
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '${{ steps.build_star.outputs.payload }}' \
            https://discord.com/api/webhooks/${{ secrets.DISCORD_MAIN_ID }}/${{ secrets.DISCORD_MAIN_TOKEN }}

  fork:
    if: github.event_name == 'fork'
    runs-on: ubuntu-latest
    steps:
      - name: Build Fork Embed
        id: build_fork
        env:
          EVENT_JSON: ${{ toJson(github.event) }}
        run: |
          REPO=$(jq -r '.repository.full_name' <<< "$EVENT_JSON")
          AUTHOR=$(jq -r '.sender.login' <<< "$EVENT_JSON")
          AVATAR="https://github.com/$AUTHOR.png"
          AUTHOR_URL="https://github.com/$AUTHOR"
          FORK_URL=$(jq -r '.forkee.html_url' <<< "$EVENT_JSON")

          EMBEDS=$(jq -nc --arg repo "$REPO" --arg author "$AUTHOR" --arg author_url "$AUTHOR_URL" --arg avatar "$AVATAR" --arg fork "$FORK_URL" '[
            {
              author: { name: $author, url: $author_url, icon_url: $avatar },
              title: "Forked Repository",
              url: $fork,
              description: ("[" + $author + "](" + $author_url + ") forked [" + $repo + "] to [" + $fork + "](" + $fork + ")"),
              color: 15105570
            }
          ]')

          echo "payload<<EOF" >> $GITHUB_OUTPUT
          jq -nc --argjson embeds "$EMBEDS" '{username:"GitHub", avatar_url:"https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png", embeds:$embeds}' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Fork Embed
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '${{ steps.build_fork.outputs.payload }}' \
            https://discord.com/api/webhooks/${{ secrets.DISCORD_MAIN_ID }}/${{ secrets.DISCORD_MAIN_TOKEN }}
