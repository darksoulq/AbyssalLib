plugins {
    id 'java'
    id("io.papermc.paperweight.userdev") version "2.0.0-beta.16"
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'me.darksoul'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = "https://repo.magmaguy.com/releases"
    }
    maven {
        url = "https://maven.andante.dev/releases/"
    }
    maven {
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        url = "https://maven.fabricmc.net/"
    }
}

dependencies {
    paperweight.paperDevBundle("1.21.5-R0.1-SNAPSHOT")
    compileOnly("space.vectrix.ignite:ignite-api:1.1.0")
    compileOnly("net.fabricmc:sponge-mixin:0.15.2+mixin.0.8.7")
    compileOnly("io.github.llamalad7:mixinextras-common:0.4.1")
    compileOnly("com.magmaguy:ResourcePackManager:1.2.2")
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset='UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}

tasks.runServer {
    minecraftVersion("1.21.5")
}

def pluginJarName = "${project.name}-${project.version}.jar"

tasks.register("copyPluginToRun", Copy) {
    dependsOn "build"

    def pluginJar = file("build/libs/${pluginJarName}")
    def pluginsDir = file("run/mods")

    from pluginJar
    into pluginsDir

    doFirst {
        pluginsDir.mkdirs()
    }
}

tasks.register("runMixinServer") {
    group = "run"
    description = "Runs the Ignite server with mixins from the run directory."

    dependsOn "copyPluginToRun"

    doLast {
        def igniteJar = file("run/ignite.jar")
        if (!igniteJar.exists()) {
            throw new GradleException("ignite.jar not found in /run folder")
        }

        exec {
            workingDir = file("run")
            executable = "java"
            args = ["-Xms1G", "-Xmx1G", "-Dignite.mods=./mods", "-Dmixin.debug=true", "-jar", igniteJar.absolutePath, "--nogui"]
        }
    }
}
